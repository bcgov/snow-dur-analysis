//#################################################################
//Declare Global Vars
//#################################################################

//Time stamp indicating a start date of 1 - SEP
var month_day = '-09-01';

//Declare the last hydrologic year to process
var end_year = 2017;

//Declare a simm ee List of day of year (doy)
var day_list = ee.List.sequence(0,365,1)

//Declare a name list for CSV output header names 
var names_list = ee.List(['001',	'002',	'003',	'004',	'005',	'006',	'007',	'008',	'009',	'010',	'011',	'012',	'013',	'014',	'015',	'016',	'017',	'018',	'019',	'020',	'021',	'022',	'023',	'024',	'025',	'026',	'027',	'028',	'029',	'030',	'031',	'032',	'033',	'034',	'035',	'036',	'037',	'038',	'039',	'040',	'041',	'042',	'043',	'044',	'045',	'046',	'047',	'048',	'049',	'050',	'051',	'052',	'053',	'054',	'055',	'056',	'057',	'058',	'059',	'060',	'061',	'062',	'063',	'064',	'065',	'066',	'067',	'068',	'069',	'070',	'071',	'072',	'073',	'074',	'075',	'076',	'077',	'078',	'079',	'080',	'081',	'082',	'083',	'084',	'085',	'086',	'087',	'088',	'089',	'090',	'091',	'092',	'093',	'094',	'095',	'096',	'097',	'098',	'099',	'100',	'101',	'102',	'103',	'104',	'105',	'106',	'107',	'108',	'109',	'110',	'111',	'112',	'113',	'114',	'115',	'116',	'117',	'118',	'119',	'120',	'121',	'122',	'123',	'124',	'125',	'126',	'127',	'128',	'129',	'130',	'131',	'132',	'133',	'134',	'135',	'136',	'137',	'138',	'139',	'140',	'141',	'142',	'143',	'144',	'145',	'146',	'147',	'148',	'149',	'150',	'151',	'152',	'153',	'154',	'155',	'156',	'157',	'158',	'159',	'160',	'161',	'162',	'163',	'164',	'165',	'166',	'167',	'168',	'169',	'170',	'171',	'172',	'173',	'174',	'175',	'176',	'177',	'178',	'179',	'180',	'181',	'182',	'183',	'184',	'185',	'186',	'187',	'188',	'189',	'190',	'191',	'192',	'193',	'194',	'195',	'196',	'197',	'198',	'199',	'200',	'201',	'202',	'203',	'204',	'205',	'206',	'207',	'208',	'209',	'210',	'211',	'212',	'213',	'214',	'215',	'216',	'217',	'218',	'219',	'220',	'221',	'222',	'223',	'224',	'225',	'226',	'227',	'228',	'229',	'230',	'231',	'232',	'233',	'234',	'235',	'236',	'237',	'238',	'239',	'240',	'241',	'242',	'243',	'244',	'245',	'246',	'247',	'248',	'249',	'250',	'251',	'252',	'253',	'254',	'255',	'256',	'257',	'258',	'259',	'260',	'261',	'262',	'263',	'264',	'265',	'266',	'267',	'268',	'269',	'270',	'271',	'272',	'273',	'274',	'275',	'276',	'277',	'278',	'279',	'280',	'281',	'282',	'283',	'284',	'285',	'286',	'287',	'288',	'289',	'290',	'291',	'292',	'293',	'294',	'295',	'296',	'297',	'298',	'299',	'300',	'301',	'302',	'303',	'304',	'305',	'306',	'307',	'308',	'309',	'310',	'311',	'312',	'313',	'314',	'315',	'316',	'317',	'318',	'319',	'320',	'321',	'322',	'323',	'324',	'325',	'326',	'327',	'328',	'329',	'330',	'331', '332',	'333',	'334',	'335',	'336',	'337',	'338',	'339',	'340',	'341',	'342',	'343',	'344',	'345',	'346',	'347',	'348',	'349',	'350',	'351',	'352',	'353',	'354',	'355',	'356',	'357',	'358',	'359',	'360',	'361',	'362',	'363',	'364',	'365', '366']);

//A list of years, for defined period 
var year_list = ee.List.sequence(2002,end_year,1);
//#################################################################
//#################################################################


//#################################################################
//Merge and clio the Terra and Aqua M*D10A1 one datasets into one
//#################################################################

//Function to clip collection to AOI (~BC) 
var clip = function(img)
{
  var clipped= img.clip(geometry);
  return clipped;
};

//Add Terra and Aqua M*D10A1 Data as EE Image Collection 
var terrac = ee.ImageCollection('MODIS/006/MOD10A1')
  .select('NDSI_Snow_Cover')
  .filterBounds(geometry).map(clip);

//Add Terra and Aqua M*D10A1 Data as EE Image Collection
var aquac = ee.ImageCollection('MODIS/006/MYD10A1')
  .select('NDSI_Snow_Cover')
  .filterBounds(geometry).map(clip);

//Add Terra and Aqua M*D10A1 Data as EE Image Collection
var merged = terrac
  .merge(aquac);
//#################################################################
//#################################################################



//#################################################################
//Get list of daily maximum NDSI images for each year 
//#################################################################

//Function to get daily max NDSI for each day of the given year over period 1-Sep to 1-Sep
var get_daily_max_ndsi = function(year)
{
  
  //Define start date from year and month_day time date string 
  var start_date = ee.Date(ee.String(ee.Number(year).toInt()).cat(month_day));

  //Function returns the maximum NDSI image for a given doy (days after 1-Sep of specified year)
  var get_max = function(doy)
  {
    //Filter M*D10A1 to doy plus 24 hours for BC time zone 
    var Daily_collc=merged
      .filter(ee.Filter.date(start_date.advance(ee.Number(doy).multiply(24), 'hour','Canada/Pacific'),start_date.advance((ee.Number(doy).multiply(24)).add(24),'hour','Canada/Pacific')));

    //Get the maximum NDSI value for the day at each pixel 
    var Daily_max = Daily_collc
      .reduce(ee.Reducer.max());

    //Declare band name from year and names_list
    var	band_name =  ee.String(ee.Number(year).toInt())
      .cat(ee.String(names_list.get(doy)));
      
    //Retrun the daily maximum NDSI image and rename to band_name
    return ee.Image(Daily_max)
      .select(['NDSI_Snow_Cover_max'],[band_name]);
  };

  //Map the get_max function over the day list, returns a list of daily NDSI maximum images 
  var daily_max_collc = day_list
    .map(get_max);

  //Return the daily maximum image list for the specified year
  return daily_max_collc;

};

//Map the get_daily_max_ndsi function over the list of years to process, returns a list of list of images 
var annual_ndsi_series = year_list
  .map(get_daily_max_ndsi);
  
//#################################################################
//#################################################################



//#################################################################
//For each year, create one image with 365 daily maximum bands. 
//Randomly sample 65000 pixels and export the time time series data 
//to CSV with location attributes included. 
//#################################################################

//For each year defined from MODIS start (2002) to end_year
for(var year = 2002; year<=end_year; year++)
{
  //Get the annual daily collection at the year index (i.e., year - 2002)
  var annual_coll = ee.List(annual_ndsi_series.get(year-2002));

  
  
  //Declare a final image for the current year
  var final_img = ee.Image();

  
  
  //For each day of the year 0 - 365, get the daily image from the annual_coll list
  for(var i = 0; i<365; i++)
    {
      //add it to the final_img as a new band
      var band = ee.Image(annual_coll.get(i))
      
      //Make missing values '-9' for export as tiff
      var wth_nodata = ee.Image(-9).where(band.gte(0), band).clip(geometry)
      
      final_img = final_img.addBands(wth_nodata);
    }

  //Get the nominal scale of the MODIS imagery 
  var mod_scale = terrac
    .first()
      .projection()
        .nominalScale()
          .getInfo();

  final_img = final_img.toInt()
  
  
  
//Export the image, specifying scale and region.
Export.image.toDrive({
  image: final_img,
  description: 'MODIS_Sep_Sep_NDSI_Max'+year,
  scale: mod_scale,
  region: geometry,
  skipEmptyTiles: true,
  folder: 'MODIS_Export_'+year
});
  
  
}
//#################################################################
//#################################################################
